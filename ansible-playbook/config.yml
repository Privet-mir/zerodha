---
- hosts: vagrant
  become: yes
  become_method: "sudo"
  vars:
    sysctl_file: "/etc/sysctl.d/00-ansible.conf"
    sysctl_config:
      - token: fs.protected_hardlinks
        value: 1
        comment: provides protection from ToCToU races
      - token: fs.protected_symlinks
        value: 1
        comment: provides protection from ToCToU races
      - token: kernel.kptr_restrict
        value: 1
        comment: makes locating kernel addresses more difficult
      - token: kernel.perf_event_paranoid
        value: 2
        comment: set perf only available to root
      - token: kernel.randomize_va_space
        value: 2
        comment: randomize addresses of mmap base, heap, stack, and VDSO page
      - token: net.core.rmem_default
        value: 16777216
      - token: net.core.wmem_default
        value: 16777216
      - token: net.core.rmem_max
        value: 16777216
      - token: net.core.wmem_max
        value: 16777216
      - token: net.core.optmem_max
        value: 40960
      - token: net.core.netdev_max_backlog
        value: 50000
      - token: net.ipv4.tcp_max_syn_backlog
        value: 30000
      - token: net.ipv4.tcp_max_tw_buckets
        value: 2000000
      - token: net.ipv4.tcp_rmem
        value: '4096 87380 16777216'
      - token: net.ipv4.tcp_wmem
        value: '4096 87380 16777216'
      - token: net.ipv4.tcp_mtu_probing
        value: 1
      - token: net.ipv4.tcp_fin_timeout
        value: 10
      - token: net.ipv4.tcp_rfc1337
        value: 1
      - token: net.ipv4.tcp_tw_reuse
        value: 1
      - token: net.ipv4.tcp_slow_start_after_idle
        value: 0
      - token: net.ipv4.tcp_syncookies
        value: 1
        comment: enables syn flood protection
      - token: net.ipv4.udp_rmem_min
        value: 8192
      - token: net.ipv4.udp_wmem_min
        value: 8192
      - token: net.ipv4.conf.all.accept_redirects
        value: 0
        comment: ignore ICMP redirects
      - token: net.ipv4.conf.all.accept_source_route
        value: 1
        comment: ignore source-routed packets
      - token: net.ipv4.conf.all.log_martians
        value: 1
      - token: net.ipv4.conf.all.secure_redirects
        value: 1
        comment: ignore ICMP redirects from non-gateway hosts
      - token: net.ipv4.conf.all.send_redirects
        value: 0
      - token: net.ipv4.conf.all.rp_filter
        value: 1
      - token: net.ipv4.conf.default.accept_redirects
        value: 0
        comment: ignore ICMP redirects
      - token: net.ipv4.conf.default.accept_source_route
        value: 1
        comment: ignore source-routed packets
      - token: net.ipv4.conf.default.log_martians
        value: 1
      - token: net.ipv4.conf.default.secure_redirects
        value: 1
        comment: ignore ICMP redirects from non-gateway hosts
      - token: net.ipv4.conf.default.send_redirects
        value: 1
      - token: net.ipv4.conf.default.rp_filter
        value: 1
      - token: net.ipv4.icmp_ignore_bogus_error_responses
        value: 1
      - token: net.ipv4.ip_forward
        value: 1
        comment: do not allow IP forwarding between netowrks
      - token: vm.swappiness
        value: 10

  tasks:

      #  - name: Create a 2048-bit SSH key for user jsmith in ~jsmith/.ssh/id_rsa
      #    user:
      #      name: demo
      #      shell: /bin/bash
      #      # generate_ssh_key: yes
      #      # ssh_key_bits: 2048
      #      ssh_key_file: ~/.ssh/id_rsa

  - name: Set hostname of VM to "demo-ops"
    hostname:
      name: "demo-ops"

  - name: Make sure we have a 'wheel' group
    group:
      name: wheel
      state: present

  - name:  Create sysctl.d file
    become: true
    sysctl:
      name: "{{ item.token }}"
      value: "{{ item.value }}"
      state: present
      sysctl_file: "{{ sysctl_file }}"
      reload: yes
    with_items: "{{ sysctl_config }}"
    tags: sysctl
  

  - name: Allow 'wheel' group to have passwordless sudo
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%wheel'
      line: '%wheel ALL=(ALL) NOPASSWD: ALL'
  
  - name: Add sudoers users to wheel group
    user: name=demo groups=wheel append=yes state=present createhome=yes shell=/bin/bash

  - name: Set authorized key for user demo copying it from current user
    authorized_key:
      user: demo
      state: present
      key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"

  - name: Add or modify nofile soft limit for the user demo
    pam_limits:
      domain: demo
      limit_type: soft
      limit_item: nofile
      value: 64000

  - name: Set timezone to Asia/Kolkata
    timezone:
      name: Asia/Kolkata
      rtc: local

  - name: Install prerequisites for Docker repository
    apt:
      name: ['apt-transport-https', 'ca-certificates', 'curl', 'gnupg2', 'software-properties-common']
      update_cache: yes

  - name: Add Docker GPG key
    apt_key: url=https://download.docker.com/linux/ubuntu/gpg

  - name: Add Docker APT repository
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ansible_distribution_release}} edge

  - name: Install Docker CE
    apt:
      name: ['docker-ce', 'docker-ce-cli', 'containerd.io']
      update_cache: yes

  - name: Install prerequisites for docker-compose
    apt:
      name: ['python3-pip', 'python3-setuptools', 'virtualenv']

  - name: Install docker-compose
    pip:
      name: docker-compose

  - name: configure log rotation
    copy:
        src: ./daemon.json
        dest: /etc/docker/

  - name: add demo user to docker group
    shell: usermod -aG docker demo

  - name: service docker restart
    shell: service docker restart
    #  - name: service docker restart
    #service:
    #   name: docker
    #    start: restarted

  - name: copy go-app
    copy:
        src: ../go-app
        dest: /etc/demo-ops
  - name: copy dockerfile
    copy:
        src: ../Dockerfile
        dest: /etc/demo-ops

  - name: copy dockerfile
    copy:
         src: ../docker-compose.yml
         dest: /etc/demo-ops

  - name: Bring application up
    shell: cd /etc/demo-ops && docker-compose -f docker-compose.yml up -d

  - name: Ping Pong Application
    shell: |
        for i in $(seq 1 10)
        do
          echo $i
          curl localhost:8000
        done
    args:
      executable: /bin/bash
    register: result

  - debug:
      var: result.stdout_lines


